version: "3"

services:
  zoo1:
    build: ./zookeeper_config
    restart: always
    hostname: zoo1
    container_name: zoo1
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 200M
    ports:
      - 2181:2181
      - 9999
    env_file:
      - zookeeper_config/zookeeper.env
    environment:
      ZOO_MY_ID: 1
    # volumes:
    #   - ./data/zk1/data:/data
    #   - ./data/zk1/datalog:/datalog

  zoo2:
    build: ./zookeeper_config
    restart: always
    hostname: zoo2
    container_name: zoo2
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 200M
    ports:
      - 2182:2181
      - 9999
    env_file:
      - zookeeper_config/zookeeper.env
    environment:
      ZOO_MY_ID: 2
    # volumes:
    #   - ./data/zk2/data:/data
    #   - ./data/zk2/datalog:/datalog

  zoo3:
    build: ./zookeeper_config
    restart: always
    hostname: zoo3
    container_name: zoo3
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 200M
    ports:
      - 2183:2181
      - 9999
    env_file:
      - zookeeper_config/zookeeper.env
    environment:
      ZOO_MY_ID: 3
    # volumes:
    #   - ./data/zk3/data:/data
    #   - ./data/zk3/datalog:/datalog

  kafka1:
    build: ./kafka_config
    restart: always
    hostname: kafka1
    container_name: kafka1
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: 2000M
    ports:
      - 9200:9092
      - 9201:9093
      - 9999
    env_file:
      - kafka_config/kafka.env
    environment:
      KAFKA_BROKER_ID: 1
    depends_on:
      - zoo1
      - zoo2
      - zoo3

  kafka2:
    build: ./kafka_config
    restart: always
    hostname: kafka2
    container_name: kafka2
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: 2000M
    ports:
      - 9202:9092
      - 9203:9093
      - 9999
    env_file:
      - kafka_config/kafka.env
    environment:
      KAFKA_BROKER_ID: 2
    depends_on:
      - kafka1

  kafka3:
    build: ./kafka_config
    restart: always
    hostname: kafka3
    container_name: kafka3
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: 2000M
    ports:
      - 9204:9092
      - 9205:9093
      - 9999
    env_file:
      - kafka_config/kafka.env
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_CREATE_TOPICS:
        "js.eval.requests:10:1 --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,\
        tb.rule-engine:3:3 --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,\
        tb.transport.api.requests:3:3 --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600"
    depends_on:
      - kafka2

  cadvisor:
    image: google/cadvisor
    restart: always
    container_name: cadvisor
    hostname: cadvisor
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 100M
    ports:
      - 8080:8080
    command:
      - "apk add --update findutils && rm -rf /var/cache/apk/*"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
      # - /dev/disk/:/dev/disk:ro
    privileged: true
    # depends_on:
    #   - kafka3

  prometheus:
    image: prom/prometheus
    restart: always
    container_name: prometheus
    hostname: prometheus
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 200M
    ports:
      - 9090:9090
    volumes:
      - ./prometheus_config/prometheus.yml:/etc/prometheus/prometheus.yml
    # command:
    #     - '--config.file=/etc/prometheus/prom_config.yml'
    environment:
      TZ: UTC-8
    # depends_on:
    #   - kafka3

  grafana:
    build: ./grafana_config
    restart: always
    container_name: grafana
    hostname: grafana
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: 200M
    ports:
      - 3000:3000
    environment:
      TZ: Asia/Taipei
      # GF_SECURITY_ADMIN_USER: ${ADMIN_USER:-admin}
      # GF_SECURITY_ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
      # GF_USERS_ALLOW_SIGN_UP: 'false'
    # volumes:
    #   - ./grafana_config/provisioning:/etc/grafana/provisioning
    #   - ./grafana_config/config.ini:/etc/grafana/config.ini
    #   - ./grafana_config/dashboards:/var/lib/grafana/dashboards
    # depends_on:
    #   - prometheus
